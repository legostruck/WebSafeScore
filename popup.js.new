// Website Safety Scanner - Popup Script

class SafetyScanner {
    constructor() {
        this.currentUrl = '';
        this.currentHostname = '';
        this.init();
    }

    async init() {
        await this.getCurrentTab();
        this.setupEventListeners();
        this.analyzeSafety();
    }

    async getCurrentTab() {
        try {
            const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
            if (tab && tab.url) {
                this.currentUrl = tab.url;
                this.currentHostname = new URL(tab.url).hostname;
                const el = document.getElementById('current-url');
                if (el) el.textContent = this.currentHostname;
            }
        } catch (error) {
            console.error('Error getting current tab:', error);
            const el = document.getElementById('current-url');
            if (el) el.textContent = 'Unable to access';
        }
    }

    setupEventListeners() {
        const rescanBtn = document.getElementById('rescan-btn');
        if (rescanBtn) rescanBtn.addEventListener('click', () => this.analyzeSafety());
    }

    async analyzeSafety() {
        this.showLoading();
        try {
            const cached = await this.getCachedResult();
            if (cached && this.isCacheValid(cached)) {
                this.displayResults(cached);
                return;
            }

            const result = await this.performSafetyCheck();
            await this.cacheResult(result);
            this.displayResults(result);
        } catch (error) {
            console.error('Safety analysis error:', error);
            this.showError('Unable to analyze website safety');
        }
    }

    async getCachedResult() {
        try {
            const result = await chrome.storage.local.get([this.currentHostname]);
            return result[this.currentHostname];
        } catch (error) {
            console.error('Error getting cached result:', error);
            return null;
        }
    }

    isCacheValid(cached) {
        if (!cached || !cached.timestamp) return false;
        const now = Date.now();
        const cacheAge = now - cached.timestamp;
        return cacheAge < (15 * 60 * 1000); // 15 minutes
    }

    async cacheResult(result) {
        try {
            const cacheData = { [this.currentHostname]: { ...result, timestamp: Date.now() } };
            await chrome.storage.local.set(cacheData);
        } catch (error) {
            console.error('Error caching result:', error);
        }
    }

    async performSafetyCheck() {
        const safetyFactors = await this.checkSafetyFactors();

        // Conservative starting score so unknown hosts don't get 100
        let score = 60;
        const threats = { malware: 'clean', phishing: 'clean', suspicious: 'clean' };

        if (safetyFactors.ssl) score += 15; else { score -= 30; threats.suspicious = 'detected'; }
        if (safetyFactors.reputation) score += 10; else score -= 15;
        if (safetyFactors.domainAge) score += 5;
        if (safetyFactors.blocklist) { score -= 50; threats.suspicious = 'detected'; }

        const dangerousPatterns = ['phishing','malware','suspicious','unsafe','temp-mail','click-here','urgent','verify-account'];
        const urlLower = (this.currentUrl || '').toLowerCase();
        dangerousPatterns.forEach(p => { if (urlLower.includes(p)) { score -= 30; threats.suspicious = 'detected'; } });

        const domainReputation = await this.checkDomainReputation();
        score -= domainReputation.penalties;
        if (domainReputation.malware) threats.malware = 'detected';
        if (domainReputation.phishing) threats.phishing = 'detected';

        return { score: Math.max(0, Math.min(100, score)), threats, lastScan: new Date().toLocaleString(), details: safetyFactors };
    }

    async checkSafetyFactors() {
        return {
            ssl: (this.currentUrl || '').startsWith('https://'),
            domainAge: Math.random() > 0.3,
            reputation: Math.random() > 0.2,
            blocklist: Math.random() > 0.9
        };
    }

    async checkDomainReputation() {
        const knownSafeDomains = ['google.com','github.com','stackoverflow.com','mozilla.org','microsoft.com','apple.com','wikipedia.org','youtube.com','linkedin.com'];
        const knownDangerousDomains = ['example-phishing.com','fake-bank.com','malware-site.com'];
        let penalties = 0, malware = false, phishing = false;
        if (knownSafeDomains.includes(this.currentHostname)) {
            penalties = 0;
        } else if (knownDangerousDomains.includes(this.currentHostname)) {
            penalties = 50; malware = true; phishing = true;
        } else {
            const risk = Math.random();
            if (risk > 0.9) { penalties = 40; malware = true; }
            else if (risk > 0.8) { penalties = 20; phishing = true; }
        }
        return { penalties, malware, phishing };
    }

    showLoading() {
        const spinner = document.getElementById('loading-spinner');
        const status = document.getElementById('status-text');
        const details = document.getElementById('threat-details');
        const rescan = document.getElementById('rescan-btn');
        if (spinner) spinner.style.display = 'block';
        if (status) { status.textContent = 'Analyzing...'; status.className = 'status-text'; }
        if (details) details.style.display = 'none';
        if (rescan) rescan.disabled = true;
    }

    displayResults(result) {
        const { score, threats, lastScan } = result;
        const scoreNumber = document.getElementById('score-number');
        const lastScanEl = document.getElementById('last-scan');
        const scoreCircle = document.getElementById('score-circle');
        const statusText = document.getElementById('status-text');
        if (scoreNumber) scoreNumber.textContent = String(score);
        if (lastScanEl) lastScanEl.textContent = lastScan;
        if (scoreCircle) scoreCircle.className = 'score-circle';
        if (statusText) {
            if (score >= 80) { scoreCircle.classList.add('safe'); statusText.textContent = 'Safe Website'; statusText.className = 'status-text safe'; }
            else if (score >= 50) { scoreCircle.classList.add('warning'); statusText.textContent = 'Potentially Risky'; statusText.className = 'status-text warning'; }
            else { scoreCircle.classList.add('danger'); statusText.textContent = 'Dangerous Website'; statusText.className = 'status-text danger'; }
        }
        const malwareEl = document.getElementById('malware-status');
        const phishingEl = document.getElementById('phishing-status');
        const suspiciousEl = document.getElementById('suspicious-status');
        if (malwareEl) { malwareEl.textContent = threats.malware; malwareEl.className = `threat-value ${threats.malware}`; }
        if (phishingEl) { phishingEl.textContent = threats.phishing; phishingEl.className = `threat-value ${threats.phishing}`; }
        if (suspiciousEl) { suspiciousEl.textContent = threats.suspicious; suspiciousEl.className = `threat-value ${threats.suspicious}`; }
        const spinner = document.getElementById('loading-spinner');
        const details = document.getElementById('threat-details');
        const rescan = document.getElementById('rescan-btn');
        if (spinner) spinner.style.display = 'none';
        if (details) details.style.display = 'block';
        if (rescan) rescan.disabled = false;
    }

    showError(message) {
        const spinner = document.getElementById('loading-spinner');
        const status = document.getElementById('status-text');
        const rescan = document.getElementById('rescan-btn');
        if (spinner) spinner.style.display = 'none';
        if (status) { status.textContent = message; status.className = 'status-text danger'; }
        if (rescan) rescan.disabled = false;
    }
}

document.addEventListener('DOMContentLoaded', () => new SafetyScanner());
